/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 03 08:43:18 GMT 2024
 */

package org.evoservice.coffeeVendingMachineNC;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class coffeeVendingMachineNC_ASM_ESTest extends coffeeVendingMachineNC_ASM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      coffeeVendingMachineNC_ASM coffeeVendingMachineNC_ASM0 = new coffeeVendingMachineNC_ASM();
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertNotNull(coffeeVendingMachineNC_ASM0);
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType0 = coffeeVendingMachineNCSig.CoinType.HALF;
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product0 = coffeeVendingMachineNCSig.Product.MILK;
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(1, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      coffeeVendingMachineNC_ASM coffeeVendingMachineNC_ASM0 = new coffeeVendingMachineNC_ASM();
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertNotNull(coffeeVendingMachineNC_ASM0);
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType0 = coffeeVendingMachineNCSig.CoinType.HALF;
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product0 = coffeeVendingMachineNCSig.Product.TEA;
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(1, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_MILK());
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType1 = coffeeVendingMachineNCSig.CoinType.ONE;
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product1 = coffeeVendingMachineNCSig.Product.COFFEE;
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(2, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(3, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType2 = coffeeVendingMachineNCSig.CoinType.HALF;
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertEquals(8, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(4, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(8, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(8, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(8, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(9, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product1);
      assertEquals(10, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(8, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(11, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(12, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertEquals(7, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(13, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(4, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(4, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(14, coffeeVendingMachineNC_ASM0.get_coins());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType3 = coffeeVendingMachineNCSig.CoinType.ONE;
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_Product1);
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(4, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(15, coffeeVendingMachineNC_ASM0.get_coins());
      assertNotSame(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_CoinType2);
      assertSame(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType3.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType3.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertEquals(6, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertEquals(3, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(16, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType3));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertEquals(3, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(17, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product1);
      assertEquals(2, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(18, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType3));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(2, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(19, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(4, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product1);
      assertEquals(1, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(20, coffeeVendingMachineNC_ASM0.get_coins());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(4, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType3);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType3));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(1, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(21, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(3, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertEquals(22, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(3, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType3));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(23, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(2, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertEquals(24, coffeeVendingMachineNC_ASM0.get_coins());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(1, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertFalse(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType3);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC_ASM0.step(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_Product1);
      assertEquals(25, coffeeVendingMachineNC_ASM0.get_coins());
      assertTrue(coffeeVendingMachineNC_ASM0.isFinalState());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_available_MILK());
      assertEquals(0, coffeeVendingMachineNC_ASM0.get_available_COFFEE());
      assertEquals(5, coffeeVendingMachineNC_ASM0.get_available_TEA());
      assertNotSame(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_CoinType2);
      assertSame(coffeeVendingMachineNCSig_CoinType3, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineNCSig_CoinType3.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_CoinType3.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
  }
}
