/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 23 12:38:15 GMT 2024
 */

package org.evoservice.coffeeVendingMachineNC;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoffeeVendingMachineFSM_ESTest extends CoffeeVendingMachineFSM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertNotNull(coffeeVendingMachineFSM0);
      
      coffeeVendingMachineFSM0.stepFSM(1, 1);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(1, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      coffeeVendingMachineFSM0.stepFSM(1, 0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(2, coffeeVendingMachineFSM0.getCoins());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineFSM0.stepFSM(1, 1);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(5, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      coffeeVendingMachineFSM0.stepFSM(0, 1);
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(6, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      coffeeVendingMachineFSM0.stepFSM(0, 0);
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(7, coffeeVendingMachineFSM0.getCoins());
      
      coffeeVendingMachineFSM0.stepFSM(0, 0);
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(8, coffeeVendingMachineFSM0.getCoins());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineFSM0.stepFSM(1, 0);
      assertTrue(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getCoins());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_2());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertNotNull(coffeeVendingMachineFSM0);
      
      coffeeVendingMachineFSM0.stepFSM(1, 2541);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertNotNull(coffeeVendingMachineFSM0);
      
      coffeeVendingMachineFSM0.stepFSM(0, (-199));
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertNotNull(coffeeVendingMachineFSM0);
      
      coffeeVendingMachineFSM0.stepFSM(2842, 6);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertNotNull(coffeeVendingMachineFSM0);
      
      coffeeVendingMachineFSM0.stepFSM((-1380), (-1380));
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
  }
}
