/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 09 15:15:44 GMT 2024
 */

package org.evoservice.atm3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ATM3v2_ESTest extends ATM3v2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertedCard("card1");
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      ATM3v2.Service aTM3v2_Service0 = ATM3v2.Service.WITHDRAWAL;
      aTM3v2_0.set_selectedService(aTM3v2_Service0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.set_insertedPin(1);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.CHOOSE, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.CHOOSEAMOUNT, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_balance_card1();
      assertEquals(3000, int0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertedCard("card3");
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertedPin(1);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_balance_card1();
      assertEquals(3000, int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      aTM3v2_0.set_insertedCard("card3");
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_balance_card1();
      assertEquals(3000, int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.set_insertedCard("card1");
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.set_insertedPin(1);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.CHOOSE, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.CHOOSE, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        ATM3v2.MoneySizeSelection.valueOf("z;o({$xCrG|;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.evoservice.atm3.ATM3v2.MoneySizeSelection.z;o({$xCrG|;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertedCard("card1");
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.set_insertedPin(1);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.CHOOSE, aTM3v2_0.get_atmState());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.CHOOSE, aTM3v2_0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertedCard("card2");
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertedCard("card1");
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      aTM3v2_0.step();
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      aTM3v2_0.step();
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ATM3v2.State[] aTM3v2_StateArray0 = ATM3v2.State.values();
      assertEquals(7, aTM3v2_StateArray0.length);
      assertNotNull(aTM3v2_StateArray0);
      
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      ATM3v2.Service aTM3v2_Service0 = ATM3v2.Service.WITHDRAWAL;
      aTM3v2_0.set_selectedService(aTM3v2_Service0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertedCard("card3");
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      int int0 = aTM3v2_0.get_moneyLeft();
      assertEquals(1000, int0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertedPin(2);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      Boolean boolean0 = aTM3v2_0.get_accessible_card3();
      assertTrue(boolean0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(boolean0);
      
      ATM3v2.Service aTM3v2_Service1 = ATM3v2.Service.EXIT;
      aTM3v2_0.set_selectedService(aTM3v2_Service1);
      assertFalse(aTM3v2_Service1.equals((Object)aTM3v2_Service0));
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotSame(aTM3v2_Service1, aTM3v2_Service0);
      
      // Undeclared exception!
      try { 
        ATM3v2.Service.valueOf("card3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.evoservice.atm3.ATM3v2.Service.card3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_moneyLeft();
      assertEquals(1000, int0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertedCard("card1");
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertedPin(1);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITPIN, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      aTM3v2_0.step();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.CHOOSE, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_balance_card2();
      assertEquals(1652, int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      Boolean boolean0 = aTM3v2_0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(boolean0);
      
      Boolean boolean1 = aTM3v2_0.get_accessible_card3();
      assertTrue(boolean1);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(boolean1);
      
      int int1 = aTM3v2_0.get_moneyLeft();
      assertEquals(1000, int1);
      assertFalse(int1 == int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      Boolean boolean2 = aTM3v2_0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(boolean2);
      
      ATM3v2.Service[] aTM3v2_ServiceArray0 = ATM3v2.Service.values();
      assertEquals(3, aTM3v2_ServiceArray0.length);
      assertNotNull(aTM3v2_ServiceArray0);
      
      aTM3v2_0.set_insertedPin((-2344));
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      ATM3v2.Service aTM3v2_Service0 = ATM3v2.Service.BALANCE;
      aTM3v2_0.set_selectedService(aTM3v2_Service0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int2 = aTM3v2_0.get_numOfBalanceChecks();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      Boolean boolean3 = aTM3v2_0.get_accessible_card3();
      assertTrue(boolean3);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(boolean3);
      
      // Undeclared exception!
      try { 
        aTM3v2_0.set_insertMoneySizeStandard(1652);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1642
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.get_atmState();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      int int0 = aTM3v2_0.get_balance_card2();
      assertEquals(1652, int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      String string0 = "";
      aTM3v2_0.set_insertMoneySizeOther(1652);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        ATM3v2.Service.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.evoservice.atm3.ATM3v2.Service.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ATM3v2.State[] aTM3v2_StateArray0 = ATM3v2.State.values();
      assertEquals(7, aTM3v2_StateArray0.length);
      assertNotNull(aTM3v2_StateArray0);
      
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.get_atmState();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ATM3v2.MoneySizeSelection[] aTM3v2_MoneySizeSelectionArray0 = ATM3v2.MoneySizeSelection.values();
      assertEquals(2, aTM3v2_MoneySizeSelectionArray0.length);
      assertNotNull(aTM3v2_MoneySizeSelectionArray0);
      
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      ATM3v2.MoneySizeSelection aTM3v2_MoneySizeSelection0 = ATM3v2.MoneySizeSelection.STANDARD;
      aTM3v2_0.set_standardOrOther(aTM3v2_MoneySizeSelection0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int0 = aTM3v2_0.get_balance_card2();
      assertEquals(1652, int0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int1 = aTM3v2_0.get_balance_card1();
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      aTM3v2_0.set_insertedPin(0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int2 = aTM3v2_0.get_numOfBalanceChecks();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int3 = aTM3v2_0.get_balance_card3();
      assertEquals(548, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      String string0 = "GZ]s2";
      // Undeclared exception!
      try { 
        ATM3v2.MoneySizeSelection.valueOf("GZ]s2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.evoservice.atm3.ATM3v2.MoneySizeSelection.GZ]s2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_numOfBalanceChecks();
      assertEquals(0, int0);
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      // Undeclared exception!
      try { 
        aTM3v2_0.set_insertedCard("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      ATM3v2.Service aTM3v2_Service0 = ATM3v2.Service.WITHDRAWAL;
      aTM3v2_0.set_selectedService(aTM3v2_Service0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      // Undeclared exception!
      try { 
        aTM3v2_0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.atm3.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_balance_card3();
      assertEquals(548, int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      ATM3v2.Service aTM3v2_Service0 = ATM3v2.Service.BALANCE;
      aTM3v2_0.set_selectedService(aTM3v2_Service0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int0 = aTM3v2_0.get_balance_card3();
      assertEquals(548, int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      int int1 = aTM3v2_0.get_balance_card1();
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      ATM3v2.Service[] aTM3v2_ServiceArray0 = ATM3v2.Service.values();
      assertEquals(3, aTM3v2_ServiceArray0.length);
      assertNotNull(aTM3v2_ServiceArray0);
      
      // Undeclared exception!
      try { 
        aTM3v2_0.set_insertedCard("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      Boolean boolean0 = aTM3v2_0.get_accessible_card2();
      assertTrue(boolean0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(boolean0);
      
      ATM3v2.MoneySizeSelection[] aTM3v2_MoneySizeSelectionArray0 = ATM3v2.MoneySizeSelection.values();
      assertEquals(2, aTM3v2_MoneySizeSelectionArray0.length);
      assertNotNull(aTM3v2_MoneySizeSelectionArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertMoneySizeOther(1);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      ATM3v2.MoneySizeSelection aTM3v2_MoneySizeSelection0 = ATM3v2.MoneySizeSelection.OTHER;
      aTM3v2_0.set_standardOrOther(aTM3v2_MoneySizeSelection0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      ATM3v2.MoneySizeSelection[] aTM3v2_MoneySizeSelectionArray0 = ATM3v2.MoneySizeSelection.values();
      assertEquals(2, aTM3v2_MoneySizeSelectionArray0.length);
      assertNotNull(aTM3v2_MoneySizeSelectionArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      ATM3v2.MoneySizeSelection aTM3v2_MoneySizeSelection0 = ATM3v2.MoneySizeSelection.STANDARD;
      aTM3v2_0.set_standardOrOther(aTM3v2_MoneySizeSelection0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      int int0 = 17;
      Boolean boolean0 = aTM3v2_0.get_accessible_card3();
      assertTrue(boolean0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(boolean0);
      
      int int1 = aTM3v2_0.get_balance_card2();
      assertEquals(1652, int1);
      assertFalse(int1 == int0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      Boolean boolean1 = aTM3v2_0.get_accessible_card2();
      assertTrue(boolean1);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(boolean1);
      
      aTM3v2_0.set_insertedPin(0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      aTM3v2_0.set_insertMoneySizeOther(17);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        aTM3v2_0.set_insertMoneySizeStandard(697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 687
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      Boolean boolean0 = aTM3v2_0.get_accessible_card3();
      assertTrue(boolean0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(boolean0);
      
      ATM3v2.Service[] aTM3v2_ServiceArray0 = ATM3v2.Service.values();
      assertEquals(3, aTM3v2_ServiceArray0.length);
      assertNotNull(aTM3v2_ServiceArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertedPin(62);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      
      // Undeclared exception!
      try { 
        aTM3v2_0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.atm3.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      int int0 = aTM3v2_0.get_balance_card1();
      assertEquals(3000, int0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        aTM3v2_0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.atm3.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      // Undeclared exception!
      try { 
        aTM3v2_0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.atm3.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ATM3v2.MoneySizeSelection[] aTM3v2_MoneySizeSelectionArray0 = ATM3v2.MoneySizeSelection.values();
      assertEquals(2, aTM3v2_MoneySizeSelectionArray0.length);
      assertNotNull(aTM3v2_MoneySizeSelectionArray0);
      
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      Boolean boolean0 = aTM3v2_0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        ATM3v2.Service.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.evoservice.atm3.ATM3v2.Service.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(aTM3v2_0);
      
      Boolean boolean0 = aTM3v2_0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        aTM3v2_0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.atm3.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertNotNull(aTM3v2_0);
      
      // Undeclared exception!
      try { 
        aTM3v2_0.set_insertMoneySizeStandard((-502));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -512
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ATM3v2 aTM3v2_0 = new ATM3v2();
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_0);
      
      aTM3v2_0.set_insertMoneySizeStandard(19);
      assertEquals(ATM3v2.State.AWAITCARD, aTM3v2_0.get_atmState());
      assertEquals(1000, aTM3v2_0.get_moneyLeft());
      assertEquals(0, aTM3v2_0.get_numOfBalanceChecks());
  }
}
