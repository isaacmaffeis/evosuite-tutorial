/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 04 20:35:58 GMT 2024
 */

package org.evoservice.atm3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evoservice.atm3.ATM3v2Sig;
import org.evoservice.atm3.ATM3v2_ASM;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ATM3v2_ASM_ESTest extends ATM3v2_ASM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      boolean boolean0 = aTM3v2_ASM0.isFinalState();
      assertFalse(boolean0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      String string0 = "card3";
      int int1 = 26;
      int int2 = 2;
      aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int1, int2, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      int int3 = 156;
      ATM3v2Sig.Service aTM3v2Sig_Service1 = ATM3v2Sig.Service.EXIT;
      int int4 = 3328;
      aTM3v2_ASM0.step(string0, int3, aTM3v2Sig_Service1, int1, int4, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      boolean boolean0 = aTM3v2_ASM0.isFinalState();
      assertFalse(boolean0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      String string0 = "card3";
      int int1 = 26;
      int int2 = 7;
      aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int1, int2, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      String string0 = "card2";
      Boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int0 = 25;
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.BALANCE;
      Boolean boolean1 = aTM3v2_ASM0.get_accessible_card3();
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      Boolean boolean2 = aTM3v2_ASM0.get_accessible_card2();
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int2 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(1652, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int3 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(548, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.OTHER;
      int int4 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(548, int4);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int0, int0, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int5 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(548, int5);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int6 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(0, int6);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      Boolean boolean3 = aTM3v2_ASM0.get_accessible_card3();
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int7 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(0, int7);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertTrue(int7 == int6);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int8 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(3000, int8);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertTrue(int8 == int1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      String string1 = null;
      int int9 = 1018;
      int int10 = (-2650);
      int int11 = 0;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step(string1, int9, aTM3v2Sig_Service0, int10, int11, aTM3v2Sig_MoneySizeSelection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      String string0 = "card1";
      int int0 = 4;
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      int int1 = 0;
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int1, int0, aTM3v2Sig_MoneySizeSelection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      boolean boolean0 = aTM3v2_ASM0.isFinalState();
      assertFalse(boolean0);
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      Boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int0 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(1652, int0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      Boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      int int0 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(548, int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      aTM3v2_ASM0.get_atmState();
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int0 = aTM3v2_ASM0.get_moneyLeft();
      assertEquals(1000, int0);
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      Boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      int int0 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(1652, int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      ATM3v2Sig.NumCard aTM3v2Sig_NumCard0 = aTM3v2_ASM0.get_currCard();
      assertNull(aTM3v2Sig_NumCard0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      
      int int1 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int0 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(1652, int0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      String string0 = "";
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      int int1 = 3437;
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int0, int1, aTM3v2Sig_MoneySizeSelection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      String string0 = "card3";
      int int1 = 26;
      aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int1, int0, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      ATM3v2Sig.Service aTM3v2Sig_Service1 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service1, int1, int0, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      boolean boolean0 = aTM3v2_ASM0.isFinalState();
      assertFalse(boolean0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertNotNull(aTM3v2_ASM0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      String string0 = "card2";
      Boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int0 = 25;
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.BALANCE;
      Boolean boolean1 = aTM3v2_ASM0.get_accessible_card3();
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      Boolean boolean2 = aTM3v2_ASM0.get_accessible_card2();
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      Integer integer0 = new Integer(int1);
      assertEquals(3000, (int)integer0);
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      int int2 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(548, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.OTHER;
      int int3 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(548, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      aTM3v2_ASM0.step(string0, int0, aTM3v2Sig_Service0, int0, int0, aTM3v2Sig_MoneySizeSelection0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int4 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      Boolean boolean3 = aTM3v2_ASM0.get_accessible_card3();
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int5 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(0, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int6 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(3000, int6);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.isFinalState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      String string1 = null;
      int int7 = (-2663);
      int int8 = 0;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step(string1, int3, aTM3v2Sig_Service0, int7, int8, aTM3v2Sig_MoneySizeSelection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
