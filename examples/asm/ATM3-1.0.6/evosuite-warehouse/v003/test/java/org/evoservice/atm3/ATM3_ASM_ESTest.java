/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 04 12:50:07 GMT 2024
 */

package org.evoservice.atm3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ATM3_ASM_ESTest extends ATM3_ASM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(548, int0);
      
      int int1 = aTM3_ASM0.get_balance_card1();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int1 == int0);
      assertEquals(3000, int1);
      
      int int2 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(548, int2);
      
      int int3 = aTM3_ASM0.get_balance_card2();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1652, int3);
      
      Integer integer0 = new Integer(int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertEquals(548, (int)integer0);
      assertNotNull(integer0);
      
      int int4 = aTM3_ASM0.get_moneyLeft();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1000, int4);
      
      Boolean boolean1 = aTM3_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      int int5 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.EXIT;
      int int6 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.STANDARD;
      aTM3_ASM0.step(int5, int3, aTM3Sig_Service0, int6, int5, aTM3Sig_MoneySizeSelection0);
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int6);
      assertFalse(int3 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      
      int int7 = 5019;
      int int8 = 200;
      ATM3Sig.Service aTM3Sig_Service1 = ATM3Sig.Service.BALANCE;
      int int9 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertTrue(int9 == int0);
      assertFalse(int9 == int4);
      assertTrue(int9 == int2);
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int3);
      assertEquals(548, int9);
      
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection1 = ATM3Sig.MoneySizeSelection.STANDARD;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int7, int8, aTM3Sig_Service1, (int) integer0, int7, aTM3Sig_MoneySizeSelection1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5019, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(548, int0);
      
      int int1 = aTM3_ASM0.get_balance_card1();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int1 == int0);
      assertEquals(3000, int1);
      
      int int2 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(548, int2);
      
      int int3 = aTM3_ASM0.get_balance_card2();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1652, int3);
      
      int int4 = aTM3_ASM0.get_moneyLeft();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(1000, int4);
      
      int int5 = aTM3_ASM0.get_moneyLeft();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(1000, int5);
      
      Boolean boolean1 = aTM3_ASM0.get_accessible_card1();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      int int6 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.WITHDRAWAL;
      int int7 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.OTHER;
      aTM3_ASM0.step(int6, int3, aTM3Sig_Service0, int7, int6, aTM3Sig_MoneySizeSelection0);
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      assertFalse(int3 == int7);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int7);
      assertFalse(int6 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      
      int int8 = 5000;
      int int9 = 200;
      ATM3Sig.Service aTM3Sig_Service1 = ATM3Sig.Service.EXIT;
      int int10 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int10 == int6);
      assertFalse(int10 == int8);
      assertFalse(int10 == int7);
      assertTrue(int10 == int0);
      assertFalse(int10 == int5);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int9);
      assertFalse(int10 == int4);
      assertTrue(int10 == int2);
      assertEquals(548, int10);
      
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection1 = ATM3Sig.MoneySizeSelection.STANDARD;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int8, int9, aTM3Sig_Service1, int4, int8, aTM3Sig_MoneySizeSelection1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5000, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = aTM3_ASM0.get_accessible_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      int int0 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(548, int0);
      
      int int1 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertTrue(int1 == int0);
      assertEquals(548, int1);
      
      int int2 = aTM3_ASM0.get_balance_card2();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1652, int2);
      
      int int3 = aTM3_ASM0.get_moneyLeft();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1000, int3);
      
      int int4 = aTM3_ASM0.get_moneyLeft();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(1000, int4);
      
      Boolean boolean2 = aTM3_ASM0.get_accessible_card1();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      int int5 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.BALANCE;
      int int6 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.STANDARD;
      aTM3_ASM0.step(int5, int2, aTM3Sig_Service0, int6, int5, aTM3Sig_MoneySizeSelection0);
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertFalse(int2 == int6);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int6);
      assertFalse(int5 == int4);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      
      int int7 = 5021;
      int int8 = 200;
      ATM3Sig.Service aTM3Sig_Service1 = ATM3Sig.Service.EXIT;
      int int9 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertTrue(int9 == int1);
      assertFalse(int9 == int2);
      assertTrue(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int6);
      assertEquals(548, int9);
      
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection1 = ATM3Sig.MoneySizeSelection.STANDARD;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int7, int8, aTM3Sig_Service1, int3, int7, aTM3Sig_MoneySizeSelection1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5021, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(548, int0);
      
      int int1 = aTM3_ASM0.get_balance_card1();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int1 == int0);
      assertEquals(3000, int1);
      
      int int2 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(548, int2);
      
      int int3 = aTM3_ASM0.get_balance_card2();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1652, int3);
      
      int int4 = aTM3_ASM0.get_moneyLeft();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1000, int4);
      
      int int5 = aTM3_ASM0.get_moneyLeft();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(1000, int5);
      
      Boolean boolean1 = aTM3_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      int int6 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.BALANCE;
      int int7 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.OTHER;
      aTM3_ASM0.step(int6, int3, aTM3Sig_Service0, int7, int6, aTM3Sig_MoneySizeSelection0);
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int3 == int7);
      assertFalse(int3 == int4);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int7);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      
      int int8 = 5021;
      int int9 = 200;
      ATM3Sig.Service aTM3Sig_Service1 = ATM3Sig.Service.EXIT;
      int int10 = aTM3_ASM0.get_balance_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int10 == int8);
      assertFalse(int10 == int1);
      assertTrue(int10 == int2);
      assertFalse(int10 == int4);
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertFalse(int10 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertTrue(int10 == int0);
      assertEquals(548, int10);
      
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection1 = ATM3Sig.MoneySizeSelection.STANDARD;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int8, int9, aTM3Sig_Service1, int4, int8, aTM3Sig_MoneySizeSelection1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5021, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = aTM3_ASM0.get_moneyLeft();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, int0);
      
      Boolean boolean1 = aTM3_ASM0.get_accessible_card3();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      int int1 = aTM3_ASM0.get_balance_card1();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int1 == int0);
      assertEquals(3000, int1);
      
      Boolean boolean2 = aTM3_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = aTM3_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      int int2 = aTM3_ASM0.get_numOfBalanceChecks();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      int int0 = aTM3_ASM0.get_balance_card2();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1652, int0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card2();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int1 = aTM3_ASM0.get_balance_card1();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int1 == int0);
      assertEquals(3000, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      int int0 = aTM3_ASM0.get_numOfBalanceChecks();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, int0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card1();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      int int0 = aTM3_ASM0.get_balance_card1();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(3000, int0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card3();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card2();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      aTM3_ASM0.get_atmState();
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      ATM3Sig.NumCard aTM3Sig_NumCard0 = aTM3_ASM0.get_currCard();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNull(aTM3Sig_NumCard0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertNotNull(aTM3_ASM0);
      
      int int0 = 0;
      int int1 = (-836);
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.BALANCE;
      int int2 = 2858;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.OTHER;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int0, int1, aTM3Sig_Service0, int2, int2, aTM3Sig_MoneySizeSelection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertNotNull(aTM3_ASM0);
      
      int int0 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(548, int0);
      
      int int1 = aTM3_ASM0.get_balance_card1();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int1 == int0);
      assertEquals(3000, int1);
      
      int int2 = aTM3_ASM0.get_moneyLeft();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1000, int2);
      
      int int3 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.EXIT;
      int int4 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.STANDARD;
      aTM3_ASM0.step(int3, int0, aTM3Sig_Service0, int4, int3, aTM3Sig_MoneySizeSelection0);
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      
      int int5 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(548, int5);
      
      int int6 = 4;
      int int7 = 0;
      ATM3Sig.Service aTM3Sig_Service1 = ATM3Sig.Service.EXIT;
      int int8 = aTM3_ASM0.get_balance_card2();
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertEquals(1652, int8);
      
      int int9 = 4;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection1 = ATM3Sig.MoneySizeSelection.OTHER;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int6, int7, aTM3Sig_Service1, int9, int8, aTM3Sig_MoneySizeSelection1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertNotNull(aTM3_ASM0);
      
      Boolean boolean0 = aTM3_ASM0.get_accessible_card3();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = aTM3_ASM0.get_balance_card1();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(3000, int0);
      
      int int1 = aTM3_ASM0.get_balance_card2();
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertFalse(int1 == int0);
      assertEquals(1652, int1);
      
      Integer integer0 = new Integer(int0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3000, (int)integer0);
      assertNotNull(integer0);
      
      int int2 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.WITHDRAWAL;
      int int3 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.STANDARD;
      aTM3_ASM0.step(int2, int1, aTM3Sig_Service0, int3, int2, aTM3Sig_MoneySizeSelection0);
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int1, int3, aTM3Sig_Service0, (int) integer0, int1, aTM3Sig_MoneySizeSelection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1652, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ATM3_ASM aTM3_ASM0 = new ATM3_ASM();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3_ASM0);
      
      int int0 = aTM3_ASM0.get_balance_card1();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int0);
      
      int int1 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITCARD, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int1 == int0);
      assertEquals(548, int1);
      
      int int2 = 0;
      ATM3Sig.Service aTM3Sig_Service0 = ATM3Sig.Service.BALANCE;
      int int3 = 10;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection0 = ATM3Sig.MoneySizeSelection.OTHER;
      aTM3_ASM0.step(int2, int0, aTM3Sig_Service0, int3, int2, aTM3Sig_MoneySizeSelection0);
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      ATM3Sig.Service aTM3Sig_Service1 = ATM3Sig.Service.EXIT;
      int int4 = aTM3_ASM0.get_balance_card3();
      assertEquals(ATM3Sig.State.AWAITPIN, aTM3_ASM0.get_atmState());
      assertEquals(1000, aTM3_ASM0.get_moneyLeft());
      assertEquals(0, aTM3_ASM0.get_numOfBalanceChecks());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(548, int4);
      
      int int5 = 4;
      int int6 = 0;
      int int7 = 4;
      ATM3Sig.MoneySizeSelection aTM3Sig_MoneySizeSelection1 = ATM3Sig.MoneySizeSelection.OTHER;
      // Undeclared exception!
      try { 
        aTM3_ASM0.step(int5, int6, aTM3Sig_Service1, int7, int4, aTM3Sig_MoneySizeSelection1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
