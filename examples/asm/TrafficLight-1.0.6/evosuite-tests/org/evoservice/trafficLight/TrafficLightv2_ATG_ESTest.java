/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 28 20:51:55 GMT 2025
 */

package org.evoservice.trafficLight;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evoservice.trafficLight.TrafficLightv2;
import org.evoservice.trafficLight.TrafficLightv2_ATG;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TrafficLightv2_ATG_ESTest extends TrafficLightv2_ATG_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TrafficLightv2_ATG trafficLightv2_ATG0 = new TrafficLightv2_ATG();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertNotNull(trafficLightv2_ATG0);
      
      Integer integer0 = trafficLightv2_ATG0.get_count();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TrafficLightv2_ATG trafficLightv2_ATG0 = new TrafficLightv2_ATG();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertNotNull(trafficLightv2_ATG0);
      
      trafficLightv2_ATG0.step();
      assertEquals(1, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(2, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertEquals(3, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertEquals(4, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertEquals(5, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.set_pedestrian(true);
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertEquals(5, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertEquals(6, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(1, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(2, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      assertEquals(3, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      assertEquals(4, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      assertEquals(5, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.PENDING, trafficLightv2_ATG0.get_status());
      assertEquals(6, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TrafficLightv2_ATG trafficLightv2_ATG0 = new TrafficLightv2_ATG();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertNotNull(trafficLightv2_ATG0);
      
      trafficLightv2_ATG0.step();
      assertEquals(1, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(2, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(3, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(4, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(5, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(6, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.set_pedestrian(false);
      assertEquals(6, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(1, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(2, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      assertEquals(3, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(4, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      assertEquals(5, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(TrafficLightv2.States.GREEN, trafficLightv2_ATG0.get_status());
      assertEquals(6, (int)trafficLightv2_ATG0.get_count());
      
      trafficLightv2_ATG0.step();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.YELLOW, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(1, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.YELLOW, trafficLightv2_ATG0.get_status());
      
      trafficLightv2_ATG0.step();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TrafficLightv2_ATG trafficLightv2_ATG0 = new TrafficLightv2_ATG();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
      assertNotNull(trafficLightv2_ATG0);
      
      trafficLightv2_ATG0.get_status();
      assertEquals(0, (int)trafficLightv2_ATG0.get_count());
      assertEquals(TrafficLightv2.States.RED, trafficLightv2_ATG0.get_status());
  }
}
