/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 23 19:17:32 GMT 2024
 */

package coffeeVendingMachineNC;

import org.evoservice.coffeeVendingMachineNC.CoffeeVendingMachineFSM_ESTest_scaffolding;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evoservice.coffeeVendingMachineNC.CoffeeVendingMachineFSM;
import org.evoservice.coffeeVendingMachineNC.coffeeVendingMachineNC;
import org.evoservice.coffeeVendingMachineNC.coffeeVendingMachineNCSig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoffeeVendingMachineFSM_ESTest extends CoffeeVendingMachineFSM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      
      boolean boolean0 = coffeeVendingMachineFSM0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product0 = coffeeVendingMachineNCSig.Product.TEA;
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType0 = coffeeVendingMachineNCSig.CoinType.HALF;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_2());
      
      coffeeVendingMachineNC0.r_Main_seq();
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType1 = coffeeVendingMachineNCSig.CoinType.ONE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(2, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineNC0.r_Main();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(3, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product1 = coffeeVendingMachineNCSig.Product.COFFEE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product2 = coffeeVendingMachineNCSig.Product.COFFEE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(5, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(6, coffeeVendingMachineFSM0.getCoins());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(8, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC0.r_serveProduct_seq(coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(11, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(12, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(13, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(14, coffeeVendingMachineFSM0.getCoins());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(3, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(15, coffeeVendingMachineFSM0.getCoins());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(2, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(16, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType2 = coffeeVendingMachineNCSig.CoinType.ONE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product2);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(2, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(17, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(18, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(19, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(3, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineNC0.r_Main_seq();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(20, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(21, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(3, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product2);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(22, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(2, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC0.r_Main_seq();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(23, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(24, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product2);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_2());
      assertTrue(coffeeVendingMachineFSM0.isEmpty());
      assertTrue(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(25, coffeeVendingMachineFSM0.getCoins());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      boolean boolean0 = coffeeVendingMachineFSM0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_2());
      assertTrue(coffeeVendingMachineFSM0.isEmpty());
      assertTrue(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(25, coffeeVendingMachineFSM0.getCoins());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      boolean boolean0 = coffeeVendingMachineFSM0.isFinalState();
      assertFalse(boolean0);
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      
      int int0 = coffeeVendingMachineFSM0.getProduct_2();
      assertEquals(10, int0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      
      int int0 = coffeeVendingMachineFSM0.getCoins();
      assertEquals(0, int0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      
      int int0 = coffeeVendingMachineFSM0.getProduct_0();
      assertEquals(10, int0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      
      int int0 = coffeeVendingMachineFSM0.getProduct_1();
      assertEquals(10, int0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      coffeeVendingMachineNC coffeeVendingMachineNC0 = new coffeeVendingMachineNC();
      assertNotNull(coffeeVendingMachineNC0);
      
      CoffeeVendingMachineFSM coffeeVendingMachineFSM0 = new CoffeeVendingMachineFSM(coffeeVendingMachineNC0);
      assertNotNull(coffeeVendingMachineFSM0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(0, coffeeVendingMachineFSM0.getCoins());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product0 = coffeeVendingMachineNCSig.Product.TEA;
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType0 = coffeeVendingMachineNCSig.CoinType.HALF;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(1, coffeeVendingMachineFSM0.getCoins());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      
      coffeeVendingMachineNC0.r_Main_seq();
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType1 = coffeeVendingMachineNCSig.CoinType.ONE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(2, coffeeVendingMachineFSM0.getCoins());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineNC0.r_Main();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertEquals(10, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(3, coffeeVendingMachineFSM0.getCoins());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product1 = coffeeVendingMachineNCSig.Product.COFFEE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertEquals(4, coffeeVendingMachineFSM0.getCoins());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNCSig.Product coffeeVendingMachineNCSig_Product2 = coffeeVendingMachineNCSig.Product.COFFEE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(5, coffeeVendingMachineFSM0.getCoins());
      assertEquals(9, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(6, coffeeVendingMachineFSM0.getCoins());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_2());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(8, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_0());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(8, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC0.r_serveProduct_seq(coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      
      coffeeVendingMachineNC0.updateASM();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(7, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(10, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(11, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(12, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(6, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(13, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(14, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertEquals(3, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(15, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertEquals(2, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(16, coffeeVendingMachineFSM0.getCoins());
      assertEquals(5, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      
      coffeeVendingMachineNCSig.CoinType coffeeVendingMachineNCSig_CoinType2 = coffeeVendingMachineNCSig.CoinType.ONE;
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(2, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(17, coffeeVendingMachineFSM0.getCoins());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertEquals(18, coffeeVendingMachineFSM0.getCoins());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertEquals(19, coffeeVendingMachineFSM0.getCoins());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(3, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineNC0.r_Main_seq();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType1, coffeeVendingMachineNCSig_CoinType0);
      assertEquals(20, coffeeVendingMachineFSM0.getCoins());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(4, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType1.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertEquals(21, coffeeVendingMachineFSM0.getCoins());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(3, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(2, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(22, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineNC0.r_Main_seq();
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product0);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertEquals(23, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product2));
      assertFalse(coffeeVendingMachineNCSig_Product0.equals((Object)coffeeVendingMachineNCSig_Product1));
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType1);
      assertNotSame(coffeeVendingMachineNCSig_CoinType0, coffeeVendingMachineNCSig_CoinType2);
      assertSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_Product1, coffeeVendingMachineNCSig_Product0);
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_2());
      assertEquals(1, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertFalse(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(24, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineFSM0.isEmpty());
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType1));
      assertFalse(coffeeVendingMachineNCSig_CoinType0.equals((Object)coffeeVendingMachineNCSig_CoinType2));
      assertFalse(coffeeVendingMachineNCSig_Product1.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      coffeeVendingMachineFSM0.stepFSM(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_Product2);
      assertNotSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType0);
      assertSame(coffeeVendingMachineNCSig_CoinType2, coffeeVendingMachineNCSig_CoinType1);
      assertSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product1);
      assertNotSame(coffeeVendingMachineNCSig_Product2, coffeeVendingMachineNCSig_Product0);
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_2());
      assertTrue(coffeeVendingMachineFSM0.isEmpty());
      assertTrue(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(25, coffeeVendingMachineFSM0.getCoins());
      assertFalse(coffeeVendingMachineNCSig_CoinType2.equals((Object)coffeeVendingMachineNCSig_CoinType0));
      assertFalse(coffeeVendingMachineNCSig_Product2.equals((Object)coffeeVendingMachineNCSig_Product0));
      
      boolean boolean0 = coffeeVendingMachineFSM0.isFinalState();
      assertTrue(boolean0);
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_2());
      assertTrue(coffeeVendingMachineFSM0.isEmpty());
      assertTrue(coffeeVendingMachineFSM0.isFinalState());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_0());
      assertEquals(0, coffeeVendingMachineFSM0.getProduct_1());
      assertEquals(25, coffeeVendingMachineFSM0.getCoins());
  }
}
