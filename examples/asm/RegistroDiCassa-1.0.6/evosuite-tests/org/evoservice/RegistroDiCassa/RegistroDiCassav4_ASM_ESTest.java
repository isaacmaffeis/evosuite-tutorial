/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 04 17:03:25 GMT 2024
 */

package org.evoservice.RegistroDiCassa;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evoservice.RegistroDiCassa.RegistroDiCassav4Sig;
import org.evoservice.RegistroDiCassa.RegistroDiCassav4_ASM;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegistroDiCassav4_ASM_ESTest extends RegistroDiCassav4_ASM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      
      registroDiCassav4_ASM0.set_insertPrezzo(8);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      
      registroDiCassav4_ASM0.step();
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      
      int int0 = registroDiCassav4_ASM0.get_totale();
      assertEquals(0, int0);
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      
      registroDiCassav4_ASM0.set_insertQuantita(8);
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      
      registroDiCassav4_ASM0.set_pizzaInserita("margherita");
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      
      RegistroDiCassav4Sig.SelezioneTipoDiPizza registroDiCassav4Sig_SelezioneTipoDiPizza0 = RegistroDiCassav4Sig.SelezioneTipoDiPizza.OTHER;
      registroDiCassav4_ASM0.set_sceltaDelTipoDiPizza(registroDiCassav4Sig_SelezioneTipoDiPizza0);
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      
      registroDiCassav4_ASM0.get_statoCassa();
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      
      String string0 = registroDiCassav4_ASM0.get_outMess();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      
      RegistroDiCassav4Sig.Servizio registroDiCassav4Sig_Servizio0 = RegistroDiCassav4Sig.Servizio.NEWORDINE;
      registroDiCassav4_ASM0.set_servizioSelezionato(registroDiCassav4Sig_Servizio0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      
      RegistroDiCassav4Sig.AggiungiPizza registroDiCassav4Sig_AggiungiPizza0 = RegistroDiCassav4Sig.AggiungiPizza.NO;
      registroDiCassav4_ASM0.set_sceltaDiAggiuntaPizza(registroDiCassav4Sig_AggiungiPizza0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegistroDiCassav4_ASM registroDiCassav4_ASM0 = new RegistroDiCassav4_ASM();
      assertNotNull(registroDiCassav4_ASM0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
      
      RegistroDiCassav4Sig.Pizza registroDiCassav4Sig_Pizza0 = registroDiCassav4_ASM0.get_pizzaCorrente();
      assertNull(registroDiCassav4Sig_Pizza0);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ASM0.get_statoCassa());
      assertEquals("", registroDiCassav4_ASM0.get_outMess());
      assertEquals(0, registroDiCassav4_ASM0.get_totale());
  }
}
