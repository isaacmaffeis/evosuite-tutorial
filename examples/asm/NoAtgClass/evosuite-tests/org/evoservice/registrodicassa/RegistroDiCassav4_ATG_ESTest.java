/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 28 17:51:15 GMT 2025
 */

package org.evoservice.registrodicassa;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evoservice.registrodicassa.RegistroDiCassav4Sig;
import org.evoservice.registrodicassa.RegistroDiCassav4_ATG;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegistroDiCassav4_ATG_ESTest extends RegistroDiCassav4_ATG_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertNotNull(registroDiCassav4_ATG0);
      
      // Undeclared exception!
      try { 
        registroDiCassav4_ATG0.get_pizzaCorrente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.registrodicassa.RegistroDiCassav4_ATG", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertNotNull(registroDiCassav4_ATG0);
      
      Integer integer0 = registroDiCassav4_ATG0.get_totale();
      assertEquals(0, (int)integer0);
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertNotNull(registroDiCassav4_ATG0);
      
      registroDiCassav4_ATG0.get_statoCassa();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertNotNull(registroDiCassav4_ATG0);
      
      RegistroDiCassav4Sig.SelezioneTipoDiPizza registroDiCassav4Sig_SelezioneTipoDiPizza0 = RegistroDiCassav4Sig.SelezioneTipoDiPizza.STANDARD;
      registroDiCassav4_ATG0.set_sceltaDelTipoPizza(registroDiCassav4Sig_SelezioneTipoDiPizza0);
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertNotNull(registroDiCassav4_ATG0);
      
      RegistroDiCassav4Sig.Servizio registroDiCassav4Sig_Servizio0 = RegistroDiCassav4Sig.Servizio.EXIT;
      registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4Sig_Servizio0);
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertNotNull(registroDiCassav4_ATG0);
      
      RegistroDiCassav4Sig.AggiungiPizza registroDiCassav4Sig_AggiungiPizza0 = RegistroDiCassav4Sig.AggiungiPizza.SI;
      registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4Sig_AggiungiPizza0);
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertNotNull(registroDiCassav4_ATG0);
      
      registroDiCassav4_ATG0.set_abstract_pizzaInserita("@>7YZ}m#<#zn\"4kpW");
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertNotNull(registroDiCassav4_ATG0);
      
      registroDiCassav4_ATG0.set_insertPrezzo((Integer) null);
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertNotNull(registroDiCassav4_ATG0);
      
      registroDiCassav4_ATG0.set_insertQuantita((Integer) null);
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertNotNull(registroDiCassav4_ATG0);
      
      String string0 = registroDiCassav4_ATG0.get_outMess();
      assertEquals("", string0);
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
      assertNotNull(registroDiCassav4_ATG0);
      
      registroDiCassav4_ATG0.step();
      assertEquals(0, (int)registroDiCassav4_ATG0.get_totale());
      assertEquals(RegistroDiCassav4Sig.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
      assertEquals("", registroDiCassav4_ATG0.get_outMess());
  }
}
