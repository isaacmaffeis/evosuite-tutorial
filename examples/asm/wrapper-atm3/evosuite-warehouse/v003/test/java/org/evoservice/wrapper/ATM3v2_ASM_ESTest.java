/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 12 13:01:17 GMT 2024
 */

package org.evoservice.wrapper;

import org.evoservice.wrapper.ATM3v2Sig.NumCard;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ATM3v2_ASM_ESTest extends ATM3v2_ASM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);

      //NumCard.elems = null;
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service1 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      boolean boolean2 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      aTM3v2_ASM0.step();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      int int2 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean5 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      
      int int3 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      ATM3v2_ASM aTM3v2_ASM1 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotNull(aTM3v2_ASM1);
      
      boolean boolean6 = aTM3v2_ASM1.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertTrue(boolean6);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      aTM3v2_ASM0.step();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int4 = 178;
      aTM3v2_ASM0.set_insertedPin(int4);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int5 = 186;
      aTM3v2_ASM0.set_insertMoneySizeOther(int5);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM0.step();
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int6 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(548, int6);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int7 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int7);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(int7 == int1);
      assertFalse(int7 == int6);
      assertTrue(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int8 = (-1394);
      aTM3v2_ASM1.set_insertMoneySizeOther(int8);
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service2 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service2);
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service2.equals((Object)aTM3v2Sig_Service1));
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertSame(aTM3v2Sig_Service2, aTM3v2Sig_Service0);
      assertNotSame(aTM3v2Sig_Service2, aTM3v2Sig_Service1);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM1.set_insertMoneySizeStandard(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2990
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      boolean boolean2 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      aTM3v2_ASM0.step();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      ATM3v2_ASM aTM3v2_ASM1 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotNull(aTM3v2_ASM1);
      
      boolean boolean4 = aTM3v2_ASM1.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertTrue(boolean4);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      int int2 = aTM3v2_ASM1.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(3000, int2);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      boolean boolean5 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean5);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int3 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      boolean boolean6 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean6);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM0.step();
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM0.set_insertedPin(int1);
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(int1 == int2);
      assertTrue(int1 == int3);
      assertTrue(int1 == int0);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int4 = 72;
      aTM3v2_ASM1.set_insertMoneySizeOther(int4);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      aTM3v2_ASM0.step();
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int5 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(548, int5);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int6 = aTM3v2_ASM1.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(3000, int6);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      int int7 = (-2960);
      aTM3v2_ASM0.set_insertMoneySizeOther(int7);
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.CHOOSEAMOUNT, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      ATM3v2_ASM aTM3v2_ASM2 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM2.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM2.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM2.get_atmState());
      assertFalse(aTM3v2_ASM2.equals((Object)aTM3v2_ASM0));
      assertFalse(aTM3v2_ASM2.equals((Object)aTM3v2_ASM1));
      assertNotNull(aTM3v2_ASM2);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM2.set_insertMoneySizeStandard(int6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2990
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service1 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      String string0 = "card3";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service0.equals((Object)aTM3v2Sig_Service1));
      assertNotSame(aTM3v2Sig_Service0, aTM3v2Sig_Service1);
      
      ATM3v2_ASM aTM3v2_ASM1 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotNull(aTM3v2_ASM1);
      
      boolean boolean2 = aTM3v2_ASM1.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertTrue(boolean2);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertTrue(boolean2 == boolean0);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      aTM3v2_ASM0.step();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM0.step();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int1);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(int1 == int0);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      boolean boolean3 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      boolean boolean4 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean4);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int2 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int2);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      boolean boolean5 = aTM3v2_ASM1.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      int int3 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int3);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        aTM3v2_ASM1.set_insertedCard(string1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      aTM3v2_ASM0.step();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = 1;
      aTM3v2_ASM0.set_insertedPin(int1);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int1 == int0);
      
      int int2 = 72;
      aTM3v2_ASM0.set_insertMoneySizeOther(int2);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      aTM3v2_ASM0.step();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int3 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(548, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      
      int int5 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int5);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      
      int int6 = 980;
      aTM3v2_ASM0.set_insertMoneySizeOther(int6);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      
      ATM3v2_ASM aTM3v2_ASM1 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotNull(aTM3v2_ASM1);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM1.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      int int7 = 139;
      aTM3v2_ASM0.set_insertMoneySizeStandard(int7);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      aTM3v2_ASM1.set_insertedPin(int5);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertTrue(int5 == int3);
      assertFalse(int5 == int7);
      assertFalse(int5 == int6);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
      
      boolean boolean2 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.CHOOSE, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean2);
      assertFalse(aTM3v2_ASM0.equals((Object)aTM3v2_ASM1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(aTM3v2_ASM0, aTM3v2_ASM1);
      
      int int8 = aTM3v2_ASM1.get_numOfBalanceChecks();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM1.get_atmState());
      assertEquals(1000, aTM3v2_ASM1.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM1.get_numOfBalanceChecks());
      assertEquals(0, int8);
      assertFalse(aTM3v2_ASM1.equals((Object)aTM3v2_ASM0));
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertNotSame(aTM3v2_ASM1, aTM3v2_ASM0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service1 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      boolean boolean2 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      aTM3v2_ASM0.step();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      int int2 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean5 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      
      int int3 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      boolean boolean6 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      
      int int4 = 0;
      aTM3v2_ASM0.set_insertedPin(int4);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = 72;
      aTM3v2_ASM0.set_insertMoneySizeOther(int5);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      aTM3v2_ASM0.step();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int6 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(548, int6);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      
      int int7 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int7);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int6);
      assertTrue(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      
      aTM3v2_ASM0.set_insertMoneySizeOther(int7);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int6);
      assertTrue(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      
      ATM3v2Sig.Service aTM3v2Sig_Service2 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service2);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertFalse(aTM3v2Sig_Service2.equals((Object)aTM3v2Sig_Service1));
      assertSame(aTM3v2Sig_Service2, aTM3v2Sig_Service0);
      assertNotSame(aTM3v2Sig_Service2, aTM3v2Sig_Service1);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertMoneySizeStandard(int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2990
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      aTM3v2_ASM0.step();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int0);
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      aTM3v2_ASM0.step();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      aTM3v2_ASM0.step();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int0);
      
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service1 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      String string0 = "card1";
      aTM3v2_ASM0.set_insertedCard(string0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service1);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(aTM3v2Sig_Service1.equals((Object)aTM3v2Sig_Service0));
      assertNotSame(aTM3v2Sig_Service1, aTM3v2Sig_Service0);
      
      boolean boolean2 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      aTM3v2_ASM0.step();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      int int2 = aTM3v2_ASM0.get_moneyLeft();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(1000, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = 0;
      aTM3v2_ASM0.set_insertedPin(int3);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      boolean boolean5 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      aTM3v2_ASM0.set_standardOrOther(aTM3v2Sig_MoneySizeSelection0);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      int int4 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(1652, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      int int5 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(1652, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      
      boolean boolean6 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      
      aTM3v2_ASM0.set_insertedPin(int0);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int0 == int5);
      assertFalse(int0 == int4);
      
      boolean boolean7 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      
      boolean boolean8 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean8);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean6);
      
      String string1 = "0#Q85T:D<d4>\\InE+~";
      aTM3v2_ASM0.set_standardOrOther(aTM3v2Sig_MoneySizeSelection0);
      assertEquals(ATM3v2Sig.State.AWAITPIN, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertedCard(string1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      aTM3v2_ASM0.get_atmState();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = 4;
      aTM3v2_ASM0.set_insertedPin(int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int1 = 58;
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      int int2 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1652, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      aTM3v2_ASM0.set_insertMoneySizeStandard(int1);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = (-503);
      aTM3v2_ASM0.set_insertedPin(int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      int int1 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1652, int1);
      assertFalse(int1 == int0);
      
      int int2 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1652, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int3 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      aTM3v2_ASM0.set_insertedPin(int1);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(int1 == int0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = aTM3v2_ASM0.get_numOfBalanceChecks();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = 1652;
      aTM3v2_ASM0.set_insertedPin(int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = (-1);
      aTM3v2_ASM0.set_insertedPin(int0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int1 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1652, int1);
      assertFalse(int1 == int0);
      
      int int2 = (-2293);
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      int int3 = 1538;
      aTM3v2_ASM0.set_insertedPin(int3);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      aTM3v2_ASM0.set_insertedPin(int2);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      aTM3v2_ASM0.set_insertedPin(int1);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      int int4 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(548, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int5 = 0;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertMoneySizeStandard(int5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int0);
      
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      aTM3v2_ASM0.set_standardOrOther(aTM3v2Sig_MoneySizeSelection0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.OTHER;
      aTM3v2_ASM0.set_standardOrOther(aTM3v2Sig_MoneySizeSelection0);
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      aTM3v2_ASM0.get_atmState();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int0);
      
      ATM3v2Sig.MoneySizeSelection aTM3v2Sig_MoneySizeSelection0 = ATM3v2Sig.MoneySizeSelection.STANDARD;
      aTM3v2_ASM0.set_standardOrOther(aTM3v2Sig_MoneySizeSelection0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int1 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1652, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card3();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean0);
      
      int int2 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(3000, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertMoneySizeStandard(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2990
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      boolean boolean1 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      aTM3v2_ASM0.get_atmState();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = 187;
      int int1 = aTM3v2_ASM0.get_balance_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(3000, int1);
      assertFalse(int1 == int0);
      
      aTM3v2_ASM0.set_insertMoneySizeOther(int0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int0 == int1);
      
      aTM3v2_ASM0.set_insertedPin(int0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int0 == int1);
      
      ATM3v2Sig.NumCard aTM3v2Sig_NumCard0 = aTM3v2_ASM0.get_currCard();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNull(aTM3v2Sig_NumCard0);
      
      int int2 = (-368);
      aTM3v2_ASM0.set_insertMoneySizeOther(int2);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = 0;
      aTM3v2_ASM0.set_insertMoneySizeOther(int0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = 2204;
      aTM3v2_ASM0.set_insertMoneySizeOther(int0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean0);
      
      ATM3v2Sig.NumCard aTM3v2Sig_NumCard0 = aTM3v2_ASM0.get_currCard();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNull(aTM3v2Sig_NumCard0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertedCard(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertMoneySizeStandard(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      int int0 = 4009;
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertMoneySizeStandard(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3999
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card1();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertTrue(boolean0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.WITHDRAWAL;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evoservice.wrapper.ATM3v2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertTrue(boolean0);
      
      aTM3v2_ASM0.get_atmState();
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertNotNull(aTM3v2_ASM0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      
      int int0 = aTM3v2_ASM0.get_moneyLeft();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, int0);
      
      int int1 = aTM3v2_ASM0.get_balance_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1652, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(548, int0);
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      aTM3v2_ASM0.get_atmState();
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      String string0 = "carod1";
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertedCard(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ATM3v2_ASM aTM3v2_ASM0 = new ATM3v2_ASM();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertNotNull(aTM3v2_ASM0);
      
      int int0 = aTM3v2_ASM0.get_moneyLeft();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(1000, int0);
      
      int int1 = aTM3v2_ASM0.get_balance_card3();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertEquals(548, int1);
      assertFalse(int1 == int0);
      
      ATM3v2Sig.Service aTM3v2Sig_Service0 = ATM3v2Sig.Service.EXIT;
      aTM3v2_ASM0.set_selectedService(aTM3v2Sig_Service0);
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      
      boolean boolean0 = aTM3v2_ASM0.get_accessible_card2();
      assertEquals(1000, aTM3v2_ASM0.get_moneyLeft());
      assertEquals(0, aTM3v2_ASM0.get_numOfBalanceChecks());
      assertEquals(ATM3v2Sig.State.AWAITCARD, aTM3v2_ASM0.get_atmState());
      assertTrue(boolean0);
      
      String string0 = "?";
      // Undeclared exception!
      try { 
        aTM3v2_ASM0.set_insertedCard(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
