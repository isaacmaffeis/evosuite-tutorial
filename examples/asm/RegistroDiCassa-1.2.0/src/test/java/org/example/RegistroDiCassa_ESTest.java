/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 12:53:01 GMT 2024
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.RegistroDiCassa;
import org.example.RegistroDiCassaSig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegistroDiCassa_ESTest extends RegistroDiCassa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0<Integer> registroDiCassaSig_Fun0_0 = registroDiCassa0.insertQuantita;
      Integer integer0 = new Integer(1);
      registroDiCassaSig_Fun0_0.value = integer0;
      // Undeclared exception!
      try { 
        registroDiCassa0.r_aggiungiAlTotale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.RegistroDiCassa", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.r_pizzaStandardSelezionata();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.fireUpdateSet();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.r_scegliTipoDiPizza();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.r_scegliSeAggiungerePizza();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.r_attendiOrdinazioni();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.r_altraPizzaSelezionata();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.r_Main();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.initControlledWithMonitored();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0Ctrl<RegistroDiCassaSig.Stati> registroDiCassaSig_Fun0Ctrl0 = registroDiCassa0.statoCassa;
      RegistroDiCassaSig.Stati registroDiCassaSig_Stati0 = RegistroDiCassaSig.Stati.ALTRAPIZZA_SELEZIONATA;
      RegistroDiCassaSig.Fun0<Integer> registroDiCassaSig_Fun0_0 = registroDiCassa0.insertPrezzo;
      registroDiCassa0.insertQuantita = registroDiCassaSig_Fun0_0;
      Integer integer0 = new Integer((-462));
      registroDiCassaSig_Fun0_0.set(integer0);
      registroDiCassaSig_Fun0Ctrl0.set(registroDiCassaSig_Stati0);
      registroDiCassa0.updateASM();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0<Integer> registroDiCassaSig_Fun0_0 = registroDiCassa0.insertPrezzo;
      registroDiCassaSig_Fun0_0.value = null;
      Integer integer0 = new Integer(1);
      registroDiCassaSig_Fun0_0.value = integer0;
      registroDiCassa0.insertQuantita = registroDiCassaSig_Fun0_0;
      registroDiCassa0.r_aggiungiAlTotale();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Pizza registroDiCassaSig_Pizza0 = new RegistroDiCassaSig.Pizza("{Tg-\"sn!B");
      Integer integer0 = registroDiCassa0.getPrezzo(registroDiCassaSig_Pizza0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.statoCassa = null;
      // Undeclared exception!
      try { 
        registroDiCassa0.r_pizzaStandardSelezionata();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.RegistroDiCassa", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      registroDiCassa0.totale = null;
      // Undeclared exception!
      try { 
        registroDiCassa0.fireUpdateSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.RegistroDiCassa", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegistroDiCassaSig.Pizza.elems = null;
      RegistroDiCassa registroDiCassa0 = null;
      try {
        registroDiCassa0 = new RegistroDiCassa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.RegistroDiCassaSig$Pizza", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0Ctrl<RegistroDiCassaSig.Stati> registroDiCassaSig_Fun0Ctrl0 = registroDiCassa0.statoCassa;
      LinkedList<RegistroDiCassaSig.Pizza> linkedList0 = new LinkedList<RegistroDiCassaSig.Pizza>();
      RegistroDiCassaSig.Pizza.elems = (List<RegistroDiCassaSig.Pizza>) linkedList0;
      RegistroDiCassaSig.Stati registroDiCassaSig_Stati0 = RegistroDiCassaSig.Stati.PIZZASTANDARD_SELEZIONATA;
      registroDiCassaSig_Fun0Ctrl0.set(registroDiCassaSig_Stati0);
      registroDiCassa0.updateASM();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0Ctrl<RegistroDiCassaSig.Stati> registroDiCassaSig_Fun0Ctrl0 = registroDiCassa0.statoCassa;
      RegistroDiCassaSig.Stati registroDiCassaSig_Stati0 = RegistroDiCassaSig.Stati.PIZZASTANDARD_SELEZIONATA;
      registroDiCassaSig_Fun0Ctrl0.set(registroDiCassaSig_Stati0);
      // Undeclared exception!
      try { 
        registroDiCassa0.updateASM();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.RegistroDiCassa", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0Ctrl<RegistroDiCassaSig.Stati> registroDiCassaSig_Fun0Ctrl0 = registroDiCassa0.statoCassa;
      RegistroDiCassaSig.Stati registroDiCassaSig_Stati0 = RegistroDiCassaSig.Stati.SCEGLI_TIPO_DI_PIZZA;
      registroDiCassaSig_Fun0Ctrl0.set(registroDiCassaSig_Stati0);
      registroDiCassa0.updateASM();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Servizio registroDiCassaSig_Servizio0 = RegistroDiCassaSig.Servizio.NEWORDINE;
      RegistroDiCassaSig.Fun0<RegistroDiCassaSig.Servizio> registroDiCassaSig_Fun0_0 = registroDiCassa0.servizioSelezionato;
      registroDiCassaSig_Fun0_0.set(registroDiCassaSig_Servizio0);
      RegistroDiCassaSig.Fun0<RegistroDiCassaSig.AggiungiPizza> registroDiCassaSig_Fun0_1 = registroDiCassa0.sceltaDiAggiuntaPizza;
      RegistroDiCassaSig.AggiungiPizza registroDiCassaSig_AggiungiPizza0 = RegistroDiCassaSig.AggiungiPizza.NO;
      registroDiCassaSig_Fun0_1.set(registroDiCassaSig_AggiungiPizza0);
      registroDiCassa0.updateASM();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Servizio registroDiCassaSig_Servizio0 = RegistroDiCassaSig.Servizio.NEWORDINE;
      RegistroDiCassaSig.Fun0<RegistroDiCassaSig.Servizio> registroDiCassaSig_Fun0_0 = registroDiCassa0.servizioSelezionato;
      registroDiCassaSig_Fun0_0.set(registroDiCassaSig_Servizio0);
      RegistroDiCassaSig.Fun0<RegistroDiCassaSig.AggiungiPizza> registroDiCassaSig_Fun0_1 = registroDiCassa0.sceltaDiAggiuntaPizza;
      RegistroDiCassaSig.AggiungiPizza registroDiCassaSig_AggiungiPizza0 = RegistroDiCassaSig.AggiungiPizza.SI;
      registroDiCassaSig_Fun0_1.set(registroDiCassaSig_AggiungiPizza0);
      registroDiCassa0.updateASM();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0<RegistroDiCassaSig.Servizio> registroDiCassaSig_Fun0_0 = registroDiCassa0.servizioSelezionato;
      RegistroDiCassaSig.Servizio registroDiCassaSig_Servizio0 = RegistroDiCassaSig.Servizio.EXIT;
      registroDiCassaSig_Fun0_0.set(registroDiCassaSig_Servizio0);
      registroDiCassa0.updateASM();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Pizza registroDiCassaSig_Pizza0 = RegistroDiCassaSig.capricciosa;
      Integer integer0 = registroDiCassa0.getPrezzo(registroDiCassaSig_Pizza0);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Pizza registroDiCassaSig_Pizza0 = RegistroDiCassaSig.marinara;
      Integer integer0 = registroDiCassa0.getPrezzo(registroDiCassaSig_Pizza0);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegistroDiCassa registroDiCassa0 = new RegistroDiCassa();
      RegistroDiCassaSig.Fun0Ctrl<RegistroDiCassaSig.Pizza> registroDiCassaSig_Fun0Ctrl0 = registroDiCassa0.pizzaCorrente;
      RegistroDiCassaSig.Pizza registroDiCassaSig_Pizza0 = RegistroDiCassaSig.margherita;
      registroDiCassaSig_Fun0Ctrl0.oldValue = registroDiCassaSig_Pizza0;
      // Undeclared exception!
      try { 
        registroDiCassa0.r_aggiungiPizzaStandardAlTotale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.RegistroDiCassa", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegistroDiCassa.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}
